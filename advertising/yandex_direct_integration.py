"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏—è–º–∏
"""
import httpx
import asyncio
import json
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta

from utils.config import settings
from utils.logger import get_logger

logger = get_logger("YANDEX_DIRECT")


class YandexDirectAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç"""
    
    def __init__(self, use_sandbox: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            use_sandbox: True –¥–ª—è –ø–µ—Å–æ—á–Ω–∏—Ü—ã, False –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        """
        self.use_sandbox = use_sandbox
        
        if use_sandbox:
            # –ê–¥—Ä–µ—Å –ø–µ—Å–æ—á–Ω–∏—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            self.api_url = "https://api-sandbox.direct.yandex.com/json/v5"
            self.token = settings.yandex_direct_sandbox_token
            logger.info("üß™ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Å–æ—á–Ω–∏—Ü—É –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç")
        else:
            # –ë–æ–µ–≤–æ–π –∞–¥—Ä–µ—Å - –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è 2025 (v501)
            self.api_url = "https://api.direct.yandex.com/json/v5"
            self.token = settings.yandex_direct_token
            logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–µ–≤–æ–π API –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        self.headers = {
            "Authorization": f"Bearer {self.token}",
            "Accept-Language": "ru",
            "Content-Type": "application/json; charset=utf-8"
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger.info(f"üîß API URL: {self.api_url}")
        logger.info(f"üîë –¢–æ–∫–µ–Ω: {self.token[:15]}...")
    
    async def get_keyword_suggestions(self, base_keywords: List[str], region_ids: List[int] = None) -> List[Dict]:
        """
        üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ API –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç
        
        Args:
            base_keywords: –ë–∞–∑–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            region_ids: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [225] - –†–æ—Å—Å–∏—è)
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        if region_ids is None:
            region_ids = [225]  # –†–æ—Å—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {len(base_keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ keywordsresearch.get –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            params = {
                "Operation": "KEYWORDS_BY_KEYWORD",
                "KeywordsByKeywordParams": {
                    "Keywords": base_keywords[:10],  # –ú–∞–∫—Å–∏–º—É–º 10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∑–∞ —Ä–∞–∑
                    "RegionIds": region_ids,
                    "Language": "RU",
                    "IncludePhrasesCount": True,
                    "ResultColumns": ["KEYWORD", "SEARCH_VOLUME", "COMPETITION", "AVERAGE_BID"]
                }
            }
            
            result = await self._make_request("keywordsresearch", "get", params)
            
            suggestions = []
            
            if "KeywordsByKeywordSearchResults" in result:
                for keyword_result in result["KeywordsByKeywordSearchResults"]:
                    if "Keywords" in keyword_result:
                        for keyword_data in keyword_result["Keywords"]:
                            suggestions.append({
                                "keyword": keyword_data.get("Keyword", ""),
                                "search_volume": keyword_data.get("SearchVolume", 0),
                                "competition": keyword_data.get("Competition", "UNKNOWN"),
                                "average_bid": keyword_data.get("AverageBid", 0) / 1000000,  # –ò–∑ –º–∏–∫—Ä–æ—Ä—É–±–ª–µ–π
                                "source": "yandex_direct_api"
                            })
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(suggestions)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç")
            return suggestions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
            return []
    
    async def get_keyword_forecast(self, keywords: List[str], region_ids: List[int] = None) -> List[Dict]:
        """
        üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        
        Args:
            keywords: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            region_ids: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–≥–∏–æ–Ω–æ–≤
            
        Returns:
            List[Dict]: –ü—Ä–æ–≥–Ω–æ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        """
        if region_ids is None:
            region_ids = [225]  # –†–æ—Å—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        logger.info(f"üìä –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            forecast_params = {
                "RegionIds": region_ids,
                "Currency": "RUB",
                "AuctionBids": [
                    {
                        "Keyword": keyword,
                        "AuctionBidItems": [
                            {
                                "Bid": 1000000,  # 1 —Ä—É–±–ª—å –≤ –º–∏–∫—Ä–æ—Ä—É–±–ª—è—Ö
                                "PositionGuaranteeType": "PREMIUM_GUARANTEE"
                            }
                        ]
                    }
                    for keyword in keywords[:50]  # –ú–∞–∫—Å–∏–º—É–º 50 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                ]
            }
            
            result = await self._make_request("keywordsresearch", "CreateNewForecast", forecast_params)
            
            if "ForecastId" in result:
                forecast_id = result["ForecastId"]
                
                # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
                await asyncio.sleep(5)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
                get_params = {
                    "ForecastId": forecast_id
                }
                
                forecast_result = await self._make_request("keywordsresearch", "GetForecast", get_params)
                
                forecasts = []
                if "KeywordForecasts" in forecast_result:
                    for forecast in forecast_result["KeywordForecasts"]:
                        forecasts.append({
                            "keyword": forecast.get("Keyword", ""),
                            "min_searches": forecast.get("MinSearches", 0),
                            "max_searches": forecast.get("MaxSearches", 0),
                            "min_price": forecast.get("MinPrice", 0) / 1000000,  # –ò–∑ –º–∏–∫—Ä–æ—Ä—É–±–ª–µ–π
                            "max_price": forecast.get("MaxPrice", 0) / 1000000,
                            "competition": forecast.get("Competition", "UNKNOWN")
                        })
                
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {len(forecasts)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
                return forecasts
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return []
    
    async def get_keyword_statistics(self, keywords: List[str], date_from: str, date_to: str) -> List[Dict]:
        """
        üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        
        Args:
            keywords: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            date_from: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            date_to: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            
        Returns:
            List[Dict]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        """
        logger.info(f"üìà –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å reports –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            report_params = {
                "SelectionCriteria": {
                    "DateFrom": date_from,
                    "DateTo": date_to
                },
                "FieldNames": [
                    "Query",
                    "Impressions", 
                    "Clicks",
                    "Cost",
                    "Ctr",
                    "AvgCpc",
                    "Conversions",
                    "ConversionRate"
                ],
                "ReportName": "SEARCH_QUERY_PERFORMANCE_REPORT",
                "ReportType": "SEARCH_QUERY_PERFORMANCE_REPORT",
                "DateRangeType": "CUSTOM_DATE",
                "Format": "TSV",
                "IncludeVAT": "YES"
            }
            
            result = await self._make_request("reports", "get", report_params)
            
            # –ü–∞—Ä—Å–∏–º TSV –¥–∞–Ω–Ω—ã–µ
            statistics = []
            if "result" in result:
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å TSV —Ñ–æ—Ä–º–∞—Ç
                # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
                pass
                
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {len(statistics)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            return statistics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return []
    
    async def get_competitor_keywords(self, domain: str, region_ids: List[int] = None) -> List[Dict]:
        """
        üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (—ç–º—É–ª—è—Ü–∏—è)
        
        Args:
            domain: –î–æ–º–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
            region_ids: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–≥–∏–æ–Ω–æ–≤
            
        Returns:
            List[Dict]: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        """
        if region_ids is None:
            region_ids = [225]
            
        logger.info(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: {domain}")
        
        # –ü–æ–∫–∞ —ç–º—É–ª—è—Ü–∏—è, —Ç–∞–∫ –∫–∞–∫ –ø—Ä—è–º–æ–≥–æ API –¥–ª—è —ç—Ç–æ–≥–æ –Ω–µ—Ç
        competitor_keywords = [
            {"keyword": f"—É—Å–ª—É–≥–∏ {domain}", "competition": "HIGH", "estimated_bid": 45},
            {"keyword": f"–∫—É–ø–∏—Ç—å {domain}", "competition": "MEDIUM", "estimated_bid": 35},
            {"keyword": f"{domain} —Ü–µ–Ω–∞", "competition": "LOW", "estimated_bid": 25}
        ]
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(competitor_keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞")
        return competitor_keywords

    async def optimize_keyword_bids(self, keyword_bids: List[Dict], target_position: int = 3) -> List[Dict]:
        """
        üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç–∞–≤–æ–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            keyword_bids: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ —Ç–µ–∫—É—â–∏–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏
            target_position: –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (1-12)
            
        Returns:
            List[Dict]: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
        """
        logger.info(f"üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ –¥–ª—è {len(keyword_bids)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        
        optimized_bids = []
        
        for keyword_data in keyword_bids:
            current_bid = keyword_data.get("bid", 0)
            keyword = keyword_data.get("keyword", "")
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã)
            if target_position <= 3:
                # –î–ª—è —Ç–æ–ø-3 –ø–æ–∑–∏—Ü–∏–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ 20%
                new_bid = current_bid * 1.2
            elif target_position <= 6:
                # –î–ª—è –ø–æ–∑–∏—Ü–∏–π 4-6 –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É
                new_bid = current_bid
            else:
                # –î–ª—è –ø–æ–∑–∏—Ü–∏–π 7+ –º–æ–∂–µ–º —Å–Ω–∏–∑–∏—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ 10%
                new_bid = current_bid * 0.9
            
            optimized_bids.append({
                "keyword": keyword,
                "old_bid": current_bid,
                "new_bid": new_bid,
                "change_percent": ((new_bid - current_bid) / current_bid) * 100
            })
        
        logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞–≤–∫–∏ –¥–ª—è {len(optimized_bids)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        return optimized_bids
    
    async def test_connection(self) -> Dict:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π"""
        
        try:
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...")
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            result = await self._make_request("campaigns", "get", {
                "SelectionCriteria": {},
                "FieldNames": ["Id", "Name", "Status"]
            })
            
            campaigns = result.get("Campaigns", [])
            
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: {len(campaigns)}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
            for campaign in campaigns[:3]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                logger.info(f"   üìä –ö–∞–º–ø–∞–Ω–∏—è: {campaign.get('Name')} (ID: {campaign.get('Id')})")
            
            return {
                "success": True,
                "campaigns_count": len(campaigns),
                "campaigns": campaigns
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def _make_request(self, service: str, method: str, params: Dict = None) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç"""
        
        request_data = {
            "method": method,
            "params": params or {}
        }
        
        url = f"{self.api_url}/{service}"
        
        try:
            logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: {service}.{method}")
            logger.debug(f"   URL: {url}")
            logger.debug(f"   Headers: {self.headers}")
            logger.debug(f"   Data: {json.dumps(request_data, ensure_ascii=False, indent=2)}")
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    url=url,
                    headers=self.headers,
                    json=request_data
                )
                
                logger.info(f"üì° –û—Ç–≤–µ—Ç API {service}.{method}: HTTP {response.status_code}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
                if "RequestId" in response.headers:
                    logger.info(f"   RequestId: {response.headers['RequestId']}")
                if "Units" in response.headers:
                    logger.info(f"   Units: {response.headers['Units']}")
                
                if response.status_code == 200:
                    result = response.json()
                    logger.debug(f"   Response: {json.dumps(result, ensure_ascii=False, indent=2)}")
                    
                    if "error" in result:
                        logger.error(f"‚ùå API Error: {result['error']}")
                        raise Exception(f"Yandex.Direct API Error: {result['error']}")
                    
                    return result.get("result", {})
                else:
                    logger.error(f"‚ùå HTTP Error: {response.status_code}")
                    logger.error(f"   Response: {response.text}")
                    response.raise_for_status()
                    
        except Exception as e:
            logger.error(f"‚ùå Yandex.Direct API Request failed: {str(e)}")
            raise

    async def create_campaign(self, campaign_config: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏"""
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
            campaign_data = {
                "Name": campaign_config.get("name", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞–º–ø–∞–Ω–∏—è"),
                "StartDate": campaign_config.get("start_date", datetime.now().strftime("%Y-%m-%d")),
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏)
                "TextCampaign": self._build_text_campaign_config(campaign_config),
                
                # –î–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç
                "DailyBudget": {
                    "Amount": campaign_config.get("daily_budget", 1000) * 1000000,  # –í –º–∏–∫—Ä–æ—Ä—É–±–ª—è—Ö
                    "Mode": "STANDARD"
                },
                
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
                "TimeZone": "Europe/Moscow"
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if campaign_config.get("end_date"):
                campaign_data["EndDate"] = campaign_config["end_date"]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            campaign_params = {
                "Campaigns": [campaign_data]
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ campaigns.add:")
            logger.info(json.dumps(campaign_params, ensure_ascii=False, indent=2))
            
            result = await self._make_request("campaigns", "add", campaign_params)
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API campaigns.add: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if "AddResults" not in result:
                logger.error(f"‚ùå –ù–µ—Ç AddResults –≤ –æ—Ç–≤–µ—Ç–µ API: {result}")
                if "Errors" in result:
                    logger.error(f"üö® –û—à–∏–±–∫–∏ API: {result['Errors']}")
                raise Exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API: {result}")
            
            add_results = result.get("AddResults", [])
            logger.info(f"üìä AddResults —Å–æ–¥–µ—Ä–∂–∏—Ç {len(add_results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            campaign_ids = []
            errors = []
            
            for i, item in enumerate(add_results):
                logger.info(f"üîç AddResults[{i}]: {item}")
                
                if "Id" in item:
                    campaign_ids.append(item["Id"])
                    logger.info(f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {item['Id']}")
                elif "Errors" in item:
                    errors.extend(item["Errors"])
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: {item['Errors']}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {item}")
            
            if errors:
                logger.error(f"üö® –û–±—â–∏–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π: {errors}")
                raise Exception(f"–û—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π: {errors}")
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: {campaign_ids}")
            return {"campaign_ids": campaign_ids, "result": result}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: {str(e)}")
            raise

    def _build_text_campaign_config(self, campaign_config: Dict) -> Dict:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ API"""
        
        bidding_strategy = campaign_config.get("bidding_strategy", "HIGHEST_POSITION")
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        text_campaign = {
            "BiddingStrategy": {
                "Search": {
                    "BiddingStrategyType": bidding_strategy
                },
                "Network": {
                    "BiddingStrategyType": "SERVING_OFF"  # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—É—é —Å–µ—Ç—å
                }
            },
            "Settings": [{
                "Option": "ADD_METRICA_TAG",
                "Value": "YES"
            }]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        if bidding_strategy == "AVERAGE_CPC":
            average_cpc = campaign_config.get("average_cpc", 50) * 1000000  # –í –º–∏–∫—Ä–æ—Ä—É–±–ª—è—Ö
            text_campaign["BiddingStrategy"]["Search"]["AverageCpc"] = {
                "AverageCpc": average_cpc
            }
        elif bidding_strategy == "WB_MAXIMUM_CLICKS":
            weekly_spend = campaign_config.get("weekly_spend_limit", 7000) * 1000000  # –í –º–∏–∫—Ä–æ—Ä—É–±–ª—è—Ö
            text_campaign["BiddingStrategy"]["Search"]["WbMaximumClicks"] = {
                "WeeklySpendLimit": weekly_spend
            }
        
        return text_campaign

    async def create_ad_groups(self, campaign_id: int, groups_config: List[Dict]) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        
        try:
            ad_groups = []
            
            for group_config in groups_config:
                ad_group = {
                    "Name": group_config.get("name", "–ì—Ä—É–ø–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"),
                    "CampaignId": campaign_id,
                    "RegionIds": group_config.get("region_ids", [213])  # –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                negative_keywords = group_config.get("negative_keywords", [])
                if negative_keywords:
                    ad_group["NegativeKeywords"] = {
                        "Items": negative_keywords
                    }
                
                ad_groups.append(ad_group)
            
            params = {"AdGroups": ad_groups}
            
            logger.info(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ adgroups.add:")
            logger.info(json.dumps(params, ensure_ascii=False, indent=2))
            
            result = await self._make_request("adgroups", "add", params)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            group_ids = []
            errors = []
            
            for item in result.get("AddResults", []):
                if "Id" in item:
                    group_ids.append(item["Id"])
                    logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {item['Id']}")
                elif "Errors" in item:
                    errors.extend(item["Errors"])
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {item['Errors']}")
            
            if errors:
                logger.error(f"üö® –û—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø: {errors}")
                raise Exception(f"–û—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø: {errors}")
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(group_ids)}")
            return {"group_ids": group_ids, "result": result}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø: {str(e)}")
            raise

    async def create_keywords(self, group_id: int, keywords_config: List[Dict]) -> Dict:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –≥—Ä—É–ø–ø—É"""
        
        try:
            keywords = []
            
            for keyword_config in keywords_config:
                keyword = {
                    "Keyword": keyword_config.get("text", ""),
                    "AdGroupId": group_id
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
                if keyword_config.get("bid"):
                    keyword["Bid"] = keyword_config["bid"] * 1000000  # –í –º–∏–∫—Ä–æ—Ä—É–±–ª—è—Ö
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
                if keyword_config.get("param1"):
                    keyword["UserParam1"] = keyword_config["param1"]
                if keyword_config.get("param2"):
                    keyword["UserParam2"] = keyword_config["param2"]
                
                keywords.append(keyword)
            
            params = {"Keywords": keywords}
            
            logger.info(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ keywords.add:")
            logger.info(json.dumps(params, ensure_ascii=False, indent=2))
            
            result = await self._make_request("keywords", "add", params)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            keyword_ids = []
            errors = []
            
            for item in result.get("AddResults", []):
                if "Id" in item:
                    keyword_ids.append(item["Id"])
                    logger.info(f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {item['Id']}")
                elif "Errors" in item:
                    errors.extend(item["Errors"])
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {item['Errors']}")
            
            if errors:
                logger.error(f"üö® –û—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {errors}")
                raise Exception(f"–û—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {errors}")
            
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(keyword_ids)}")
            return {"keyword_ids": keyword_ids, "result": result}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {str(e)}")
            raise

    async def create_ads(self, group_id: int, ads_config: List[Dict]) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        
        try:
            ads = []
            
            for ad_config in ads_config:
                ad = {
                    "AdGroupId": group_id,
                    
                    # –¢–µ–∫—Å—Ç–æ–≤–æ-–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                    "TextAd": {
                        "Title": ad_config.get("title", "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
                        "Text": ad_config.get("text", "–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
                        "Href": ad_config.get("href", "https://example.com"),  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                        "Mobile": "NO"
                    }
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
                if ad_config.get("title2"):
                    ad["TextAd"]["Title2"] = ad_config["title2"]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                if ad_config.get("display_href"):
                    ad["TextAd"]["DisplayHref"] = ad_config["display_href"]
                
                ads.append(ad)
            
            params = {"Ads": ads}
            
            logger.info(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ ads.add:")
            logger.info(json.dumps(params, ensure_ascii=False, indent=2))
            
            result = await self._make_request("ads", "add", params)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            ad_ids = []
            errors = []
            
            for item in result.get("AddResults", []):
                if "Id" in item:
                    ad_ids.append(item["Id"])
                    logger.info(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {item['Id']}")
                elif "Errors" in item:
                    errors.extend(item["Errors"])
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {item['Errors']}")
            
            if errors:
                logger.error(f"üö® –û—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {errors}")
                raise Exception(f"–û—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {errors}")
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(ad_ids)}")
            return {"ad_ids": ad_ids, "result": result}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {str(e)}")
            raise

    async def get_campaign_stats(self, campaign_ids: List[int], date_from: str, date_to: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º"""
        
        try:
            report_definition = {
                "SelectionCriteria": {
                    "DateFrom": date_from,
                    "DateTo": date_to,
                    "CampaignIds": campaign_ids
                },
                "FieldNames": [
                    "Date", "CampaignId", "CampaignName", "Impressions", "Clicks",
                    "Ctr", "Cost", "AvgCpc", "Conversions", "ConversionRate", "CostPerConversion"
                ],
                "ReportName": f"–û—Ç—á–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π {datetime.now().strftime('%Y-%m-%d')}",
                "ReportType": "CAMPAIGN_PERFORMANCE_REPORT",
                "DateRangeType": "CUSTOM_DATE",
                "Format": "TSV",
                "IncludeVAT": "YES",
                "IncludeDiscount": "YES"
            }
            
            result = await self._make_request("reports", "get", report_definition)
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {len(campaign_ids)} –∫–∞–º–ø–∞–Ω–∏–π")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            raise

    async def update_bids(self, keyword_ids: List[int], new_bids: List[float]) -> Dict:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        
        try:
            keywords = []
            
            for keyword_id, bid in zip(keyword_ids, new_bids):
                keyword = {
                    "Id": keyword_id,
                    "Bid": int(bid * 1000000)  # –í –º–∏–∫—Ä–æ—Ä—É–±–ª—è—Ö
                }
                keywords.append(keyword)
            
            params = {"Keywords": keywords}
            result = await self._make_request("keywords", "update", params)
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞–≤–∫–∏ –¥–ª—è {len(keyword_ids)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫: {str(e)}")
            raise

    async def moderate_campaign(self, campaign_id: int) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–º–ø–∞–Ω–∏—é
            params = {
                "CampaignIds": [campaign_id]
            }
            
            result = await self._make_request("campaigns", "resume", params)
            
            logger.info(f"–ö–∞–º–ø–∞–Ω–∏—è {campaign_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {str(e)}")
            raise


class YandexDirectCampaignManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π"""
    
    def __init__(self):
        self.api_client = YandexDirectAPIClient()
    
    async def create_full_campaign_from_strategy(self, strategy_config: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ò–ò-–∞–≥–µ–Ω—Ç–∞"""
        
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ò–ò")
            
            # 1. –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
            campaign_result = await self.api_client.create_campaign(strategy_config.get("campaign", {}))
            campaign_id = campaign_result["campaign_ids"][0]
            
            # 2. –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            groups_config = strategy_config.get("ad_groups", [])
            groups_result = await self.api_client.create_ad_groups(campaign_id, groups_config)
            
            # 3. –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
            for i, group_id in enumerate(groups_result["group_ids"]):
                if i < len(groups_config):
                    keywords_config = groups_config[i].get("keywords", [])
                    if keywords_config:
                        await self.api_client.create_keywords(group_id, keywords_config)
            
            # 4. –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
            for i, group_id in enumerate(groups_result["group_ids"]):
                if i < len(groups_config):
                    ads_config = groups_config[i].get("ads", [])
                    if ads_config:
                        await self.api_client.create_ads(group_id, ads_config)
            
            # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            campaign_summary = {
                "campaign_id": campaign_id,
                "groups_count": len(groups_result["group_ids"]),
                "created_at": datetime.now().isoformat(),
                "status": "created_in_draft",
                "next_steps": [
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏",
                    "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
                    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
                ]
            }
            
            logger.info(f"–ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {campaign_summary}")
            return campaign_summary
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: {str(e)}")
            raise

    async def optimize_campaign_bids(self, campaign_id: int, optimization_rules: Dict) -> Dict:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç–∞–≤–æ–∫ –∫–∞–º–ø–∞–Ω–∏–∏"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            date_from = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
            date_to = datetime.now().strftime("%Y-%m-%d")
            
            stats = await self.api_client.get_campaign_stats([campaign_id], date_from, date_to)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏
            # (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
            
            optimization_result = {
                "campaign_id": campaign_id,
                "optimization_date": datetime.now().isoformat(),
                "changes_made": 0,
                "expected_improvement": "5-15%"
            }
            
            logger.info(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return optimization_result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏: {str(e)}")
            raise


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
yandex_direct_manager = YandexDirectCampaignManager() 