"""
üéØ API –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
"""

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, HttpUrl
from typing import Dict, List, Optional

from advertising.professional_campaign_manager import professional_campaign_manager
from utils.logger import get_logger

logger = get_logger("PROFESSIONAL_CAMPAIGN_API")

router = APIRouter()


class CampaignRequest(BaseModel):
    landing_url: HttpUrl
    business_description: str
    selected_tier: Optional[str] = "STANDARD"  # ECONOMY, STANDARD, PREMIUM


class LaunchRequest(BaseModel):
    campaign_plan: Dict


@router.post("/analyze-landing")
async def analyze_landing(landing_url: str):
    """–ê–Ω–∞–ª–∏–∑ –ª–µ–Ω–¥–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        analysis = await professional_campaign_manager.analyze_landing_page(landing_url)
        
        return {
            "success": True,
            "analysis": {
                "url": analysis.url,
                "title": analysis.title,
                "main_offer": analysis.main_offer,
                "target_audience": analysis.target_audience,
                "pain_points": analysis.pain_points,
                "unique_value_propositions": analysis.unique_value_propositions,
                "keywords": analysis.keywords
            }
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞: {str(e)}")


@router.post("/create-campaign-plan")
async def create_campaign_plan(request: CampaignRequest):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∫–∞–º–ø–∞–Ω–∏–∏"""
    try:
        logger.info(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è {request.landing_url}")
        
        campaign_plan = await professional_campaign_manager.create_professional_campaign_plan(
            landing_url=str(request.landing_url),
            business_description=request.business_description,
            selected_tier=request.selected_tier
        )
        
        if campaign_plan.get("success"):
            logger.info("‚úÖ –ü–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return campaign_plan
        else:
            raise HTTPException(status_code=400, detail=campaign_plan.get("error", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"))
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –∫–∞–º–ø–∞–Ω–∏–∏: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞: {str(e)}")


@router.post("/launch-campaign")
async def launch_campaign(request: LaunchRequest):
    """–ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç")
        
        result = await professional_campaign_manager.launch_campaign(request.campaign_plan)
        
        if result.get("success"):
            logger.info(f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞: ID {result.get('campaign_id')}")
            return result
        else:
            raise HTTPException(status_code=400, detail=result.get("error", "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏"))
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")


@router.get("/campaign-tiers-info")
async def get_campaign_tiers_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö –∫–∞–º–ø–∞–Ω–∏–π"""
    return {
        "tiers": [
            {
                "name": "ECONOMY",
                "title": "–≠–∫–æ–Ω–æ–º",
                "description": "–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                "daily_budget": 1500,
                "features": [
                    "30 –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤",
                    "3 –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
                    "–®–∏—Ä–æ–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ",
                    "~1 –ª–∏–¥ –≤ –¥–µ–Ω—å",
                    "ROI 2.5:1"
                ],
                "best_for": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–∏—à, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç"
            },
            {
                "name": "STANDARD", 
                "title": "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
                "description": "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ",
                "daily_budget": 3500,
                "features": [
                    "80 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤",
                    "7 –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π", 
                    "–§—Ä–∞–∑–æ–≤–æ–µ –∏ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ",
                    "~2 –ª–∏–¥–∞ –≤ –¥–µ–Ω—å",
                    "ROI 3.5:1"
                ],
                "best_for": "–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∏—à–∏"
            },
            {
                "name": "PREMIUM",
                "title": "–ü—Ä–µ–º–∏—É–º", 
                "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                "daily_budget": 7000,
                "features": [
                    "–í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
                    "12 –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
                    "–¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ + —Ä–µ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥",
                    "~5 –ª–∏–¥–æ–≤ –≤ –¥–µ–Ω—å", 
                    "ROI 4.5:1"
                ],
                "best_for": "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—ã—Å–æ–∫–æ–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –Ω–∏—à–∏"
            }
        ]
    }


@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return {
        "status": "healthy",
        "service": "Professional Campaign Manager",
        "version": "1.0.0"
    } 